{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\PI-CI0128-Grupo-X\\\\client\\\\src\\\\pages\\\\Payment.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport '../styles.scss';\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Context } from '../Context';\nimport { AuthContext } from '../AuthContext.js';\nimport { showErrorDialog, showSuccessDialog, calculateNumberOfDays } from \"../Misc.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = () => {\n  _s();\n  const navigate = useNavigate();\n  const [selectedOption, setSelectedOption] = useState('credit-card');\n  const [servicesList, setServicesList] = useState([]);\n  const {\n    checkInDate\n  } = useContext(Context);\n  const {\n    checkOutDate\n  } = useContext(Context);\n  const {\n    lastRoomClickedID\n  } = useContext(Context);\n  const {\n    userId\n  } = useContext(AuthContext);\n  const {\n    changePaymentMethod\n  } = useContext(Context);\n  const [services, setServices] = useState([]);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [selectedService, setServiceOption] = useState('');\n\n  // Define an asynchronous function to fetch data\n  const fetchAndSetData = async () => {\n    try {\n      // Fetch services data\n      axios.get('/services').then(response => {\n        // Set the services state with the fetched data\n        setServices(response.data);\n        // Set the default service option if any\n        if (response.data[0]) {\n          setServiceOption(response.data[0].service_name);\n        }\n      });\n\n      // Fetch room details by room ID\n      const roomResponse = await axios.get(`/rooms/by_roomID${lastRoomClickedID}`);\n      // Fetch room type details by room type ID\n      const roomTypeResponse = await axios.get(`/rooms/room_type_ByID${roomResponse.data[0].type_of_room}`);\n\n      // Calculate total price based on room type price and number of days\n      setTotalPrice(roomTypeResponse.data[0].price * calculateNumberOfDays(checkInDate, checkOutDate));\n    } catch (error) {\n      showErrorDialog(\"An error occurred:\", error, false, navigate);\n    }\n  };\n  useEffect(() => {\n    fetchAndSetData();\n  }, []);\n  const handleExpirationChange = async event => {\n    // Extract the input value (card expiration month / year)\n    let inputValue = event.target.value;\n\n    // Ensure input is at least 3 characters long\n    if (inputValue.length <= 3) {\n      return;\n    }\n\n    // Remove non-digit characters from the input\n    inputValue = inputValue.replace(/\\D/g, '');\n\n    // Validate and format the input\n    if (inputValue.length > 0) {\n      // Extract month and year from the input\n      let [month, year] = inputValue.match(/(\\d{1,2})(\\d{0,2})/).slice(1, 3);\n\n      // Convert month and year to integers\n      month = parseInt(month, 10);\n      year = parseInt(year, 10);\n\n      // Validate month and year\n      if (month > 12 || month < 1 || year < new Date().getFullYear() - 2000) {\n        showErrorDialog('Invalid expiration date', \"Make sure the month and the date are correct.\", false, navigate);\n        // Clear input field\n        event.target.value = ``;\n        return;\n      }\n\n      // Update input field with formatted month/year\n      event.target.value = `${month}/${year}`;\n    }\n  };\n\n  // Function to handle the addition of a new service to the services list\n  const handleAddService = event => {\n    // Check if the services list already includes the selected service option\n    if (servicesList.includes(selectedService)) {\n      // If the service option already exists, show an error dialog\n      showErrorDialog(\"Error: \", \"Service option already exists in the list.\", false, navigate);\n    } else {\n      // If the service option doesn't exist, add it to the services list\n      setServicesList(previousList => [...previousList, selectedService]);\n\n      // Fetch the price of the selected service from the backend\n      axios.get(`services/get_service${selectedService}`).then(response => {\n        // Extract the service price from the response data\n        const servicePrice = response.data[0].service_price;\n        // Update the total price by adding the service price\n        setTotalPrice(previousTotalPrice => previousTotalPrice + servicePrice);\n      }).catch(error => {\n        // If there's an error fetching the service price, show an error dialog\n        showErrorDialog('Error fetching service price:', error, false, navigate);\n      });\n    }\n  };\n  const handleServiceChange = e => {\n    setServiceOption(e.target.value);\n  };\n  const handleOptionChange = e => {\n    setSelectedOption(e.target.value);\n    changePaymentMethod(e.target.value);\n  };\n  let cardType = \"\";\n  const handleCardNumber = e => {\n    let numericValue = e.target.value;\n    if (/\\D/.test(e.target.value)) {\n      numericValue = e.target.value.replace(/\\D/g, '');\n      e.target.value = numericValue;\n    }\n    let newCardType = '';\n    if (/^4/.test(numericValue)) {\n      newCardType = 'Visa';\n    } else if (/^5[1-5]/.test(numericValue)) {\n      newCardType = 'Mastercard';\n    } else if (/^3[47]/.test(numericValue)) {\n      newCardType = 'American Express';\n    }\n    cardType = newCardType;\n  };\n  const bankNameRef = useRef(null);\n  const cashNameRef = useRef(null);\n  const handlePay = async e => {\n    e.preventDefault();\n    let paymentId = 0;\n    let paymentEndpoint = '';\n    let paymentData = {};\n    switch (selectedOption) {\n      case 'credit-card':\n        // For credit card payment\n        paymentEndpoint = '/payments/add_card_payment'; // Set endpoint for adding card payment\n        paymentData = {\n          price: totalPrice,\n          paymentMethodId: 1,\n          cardType\n        }; // Set payment data for credit card\n        break;\n      case 'bank-transaction':\n        // For bank transaction payment\n        paymentEndpoint = '/payments/add_bank_payment'; // Set endpoint for adding bank payment\n        paymentData = {\n          price: totalPrice,\n          paymentMethodId: 2,\n          bankName: bankNameRef.current.value\n        }; // Set payment data for bank transaction\n        break;\n      case 'cash':\n        // For cash payment\n        paymentEndpoint = '/payments/add_cash_payment'; // Set endpoint for adding cash payment\n        const change = cashNameRef.current.value - totalPrice; // Calculate change\n        paymentData = {\n          price: totalPrice,\n          paymentMethodId: 3,\n          change\n        }; // Set payment data for cash\n        break;\n      default:\n        break;\n    }\n\n    // If payment endpoint is determined\n    if (paymentEndpoint !== '') {\n      // Make a POST request to add payment with payment data\n      const paymentRes = await axios.post('/payments/add_payment', paymentData);\n      // Make a POST request to the determined payment endpoint with payment data\n      await axios.post(paymentEndpoint, paymentData);\n      // Update payment ID with the received payment ID\n      paymentId = paymentRes.data.payment_id;\n    }\n    const reservationRequestData = {\n      check_in_date: checkInDate,\n      // Date of check-in\n      check_out_date: checkOutDate,\n      // Date of check-out\n      room_id: lastRoomClickedID,\n      // ID of the room selected\n      payment_id: paymentId,\n      // ID of the payment method\n      user_id: userId // ID of the user making the reservation\n    };\n\n    // Making a POST request to add reservation\n    const reservationResponse = await axios.post(\"/reservations/add_reservation\", reservationRequestData);\n    try {\n      let counter = 0; // Counter to keep track of the number of services processed\n      // Iterating through each service asynchronously\n      console.log(\"from\", servicesList);\n      servicesList.map(async service => {\n        // Fetching service details\n        const serviceResponse = await axios.get(`/services/get_service${service}`);\n        console.log(\"NOOO\", reservationResponse);\n        const serviceId = serviceResponse.data[0].serviceid; // Extracting service ID from the response\n        // Making a POST request to add service to service log\n        await axios.post(`/services/add_to_service_log`, {\n          service_id: serviceId,\n          reservation_id: reservationResponse.data.insertId\n        });\n        counter++;\n        // Checking if all services have been processed\n        if (counter === servicesList.length) {\n          return Promise.resolve(); // Resolving the promise once all services are processed\n        }\n      });\n    } catch (error) {\n      showErrorDialog(\"Error occurred:\", error, false, navigate);\n    }\n    showSuccessDialog(\"Payment Approved!\", \"You'll receive an email with your reservation details soon.\", navigate);\n  };\n  const renderForm = () => {\n    switch (selectedOption) {\n      case 'credit-card':\n        return /*#__PURE__*/_jsxDEV(CreditCardForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 16\n        }, this);\n      case 'bank-transaction':\n        return /*#__PURE__*/_jsxDEV(BankTransactionForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 16\n        }, this);\n      case 'cash':\n        return /*#__PURE__*/_jsxDEV(CashForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 16\n        }, this);\n      default:\n        return null;\n    }\n  };\n  return (\n    /*#__PURE__*/\n    // Main container with body class\n    _jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"payment-method-selection\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"payment-method-selection-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"credit-card\",\n            checked: selectedOption === 'credit-card' // Checking if credit card is selected\n            ,\n            onChange: handleOptionChange // Handling change event for credit card selection\n            ,\n            className: \"payment-method-selection-content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 11\n          }, this), \"Credit Card\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"payment-method-selection-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"bank-transaction\",\n            checked: selectedOption === 'bank-transaction' // Checking if bank transaction is selected\n            ,\n            onChange: handleOptionChange // Handling change event for bank transaction selection\n            ,\n            className: \"payment-method-selection-content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 11\n          }, this), \"Bank Transaction\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"payment-method-selection-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            value: \"cash\",\n            checked: selectedOption === 'cash' // Checking if cash is selected\n            ,\n            onChange: handleOptionChange // Handling change event for cash selection\n            ,\n            className: \"payment-method-selection-content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 11\n          }, this), \"Cash\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: /*#__PURE__*/_jsxDEV(\"center\", {\n          children: totalPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 7\n      }, this), renderForm()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }, this)\n  );\n\n  // Component for Credit Card payment form\n  function CreditCardForm() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"#\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"cardnumber\",\n            children: \"Card Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            onInput: handleCardNumber,\n            maxLength: \"19\",\n            id: \"cardnumber\",\n            className: \"cardnumber\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"cardholder\",\n            children: \"Card Holder Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"cardholder\",\n            className: \"cardholder\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"expiration\",\n            children: \"Expiration Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"expiration\",\n            className: \"expiration\",\n            onChange: handleExpirationChange,\n            placeholder: \"MM/YY\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"pin\",\n            children: \"PIN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"pin\",\n            className: \"pin\",\n            maxLength: \"4\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"services_selector\",\n          className: \"services_selector\",\n          id: \"services_selector_1\",\n          onChange: handleServiceChange,\n          value: selectedOption,\n          required: true,\n          children: services.map(service => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: service.service_name,\n            children: service.service_name\n          }, service.serviceid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-service-button\",\n          onClick: handleAddService,\n          children: /*#__PURE__*/_jsxDEV(\"center\", {\n            children: \"Add Amenity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 77\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pay-button\",\n          onClick: handlePay,\n          children: /*#__PURE__*/_jsxDEV(\"center\", {\n            children: \"Confirm Payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Component for Bank Transaction payment form\n  function BankTransactionForm() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bank-form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"#\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bank-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"accountHolder\",\n            children: \"Account Holder Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"accountHolder\",\n            className: \"accountHolder\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bank-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"accountNumber\",\n            children: \"Account Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"accountNumber\",\n            className: \"accountNumber\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bank-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bank_name\",\n            children: \"Bank Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"bank_name\",\n            className: \"bank_name\",\n            ref: bankNameRef,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bank-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            children: \"Transaction Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"description\",\n            className: \"description\",\n            rows: \"4\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"services_selector\",\n          className: \"services_selector\",\n          id: \"services_selector_1\",\n          onChange: handleServiceChange,\n          value: selectedOption,\n          required: true,\n          children: services.map(service => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: service.service_name,\n            children: service.service_name\n          }, service.serviceid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-service-button\",\n          onClick: handleAddService,\n          children: /*#__PURE__*/_jsxDEV(\"center\", {\n            children: \"Add Amenity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 77\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pay-button\",\n          onClick: handlePay,\n          children: /*#__PURE__*/_jsxDEV(\"center\", {\n            children: \"Confirm Payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Component for Cash payment form\n  function CashForm() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cash-form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"#\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cash-form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"badge\",\n            children: \"Badge Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"badge\",\n            className: \"badge\",\n            id: \"badge\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"colones\",\n              children: \"Colones\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"dolares\",\n              children: \"Dollars\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"euros\",\n              children: \"Euros\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"otro\",\n              children: \"Other\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"cash-amount\",\n            children: \"Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            id: \"cash-amount\",\n            className: \"cash-amount\",\n            ref: cashNameRef,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"services_selector\",\n          className: \"services_selector\",\n          id: \"services_selector_1\",\n          onChange: handleServiceChange,\n          value: selectedOption,\n          required: true,\n          children: services.map(service => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: service.service_name,\n            children: service.service_name\n          }, service.serviceid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-service-button\",\n          onClick: handleAddService,\n          children: /*#__PURE__*/_jsxDEV(\"center\", {\n            children: \"Add Amenity\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 77\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"pay-button\",\n          onClick: handlePay,\n          children: /*#__PURE__*/_jsxDEV(\"center\", {\n            children: \"Confirm Payment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(Payment, \"4NHwlrEP8YdSCOhJpJecaGtuyGE=\", false, function () {\n  return [useNavigate];\n});\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","axios","useNavigate","Context","AuthContext","showErrorDialog","showSuccessDialog","calculateNumberOfDays","jsxDEV","_jsxDEV","Payment","_s","navigate","selectedOption","setSelectedOption","servicesList","setServicesList","checkInDate","checkOutDate","lastRoomClickedID","userId","changePaymentMethod","services","setServices","totalPrice","setTotalPrice","selectedService","setServiceOption","fetchAndSetData","get","then","response","data","service_name","roomResponse","roomTypeResponse","type_of_room","price","error","handleExpirationChange","event","inputValue","target","value","length","replace","month","year","match","slice","parseInt","Date","getFullYear","handleAddService","includes","previousList","servicePrice","service_price","previousTotalPrice","catch","handleServiceChange","e","handleOptionChange","cardType","handleCardNumber","numericValue","test","newCardType","bankNameRef","cashNameRef","handlePay","preventDefault","paymentId","paymentEndpoint","paymentData","paymentMethodId","bankName","current","change","paymentRes","post","payment_id","reservationRequestData","check_in_date","check_out_date","room_id","user_id","reservationResponse","counter","console","log","map","service","serviceResponse","serviceId","serviceid","service_id","reservation_id","insertId","Promise","resolve","renderForm","CreditCardForm","fileName","_jsxFileName","lineNumber","columnNumber","BankTransactionForm","CashForm","className","children","type","checked","onChange","action","htmlFor","onInput","maxLength","id","required","placeholder","name","onClick","ref","rows","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/PI-CI0128-Grupo-X/client/src/pages/Payment.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useContext, useEffect, useRef } from 'react'\r\nimport '../styles.scss';\r\nimport axios from \"axios\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { Context } from '../Context';\r\nimport { AuthContext } from '../AuthContext.js';\r\nimport { showErrorDialog, showSuccessDialog, calculateNumberOfDays } from \"../Misc.js\";\r\n\r\nconst Payment = () => {\r\n  const navigate = useNavigate();\r\n  const [selectedOption, setSelectedOption] = useState('credit-card');\r\n  const [servicesList, setServicesList] = useState([]);\r\n  const { checkInDate } = useContext(Context);\r\n  const { checkOutDate } = useContext(Context);\r\n  const { lastRoomClickedID } = useContext(Context);\r\n  const { userId } = useContext(AuthContext);\r\n  const { changePaymentMethod } = useContext(Context);\r\n  const [services, setServices] = useState([]);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [selectedService, setServiceOption] = useState('');\r\n\r\n  // Define an asynchronous function to fetch data\r\n  const fetchAndSetData = async () => {\r\n    try {\r\n      // Fetch services data\r\n      axios.get('/services').then(response => {\r\n        // Set the services state with the fetched data\r\n        setServices(response.data);\r\n        // Set the default service option if any\r\n        if (response.data[0]) {\r\n          setServiceOption(response.data[0].service_name);\r\n        }\r\n      });\r\n\r\n      // Fetch room details by room ID\r\n      const roomResponse = await axios.get(`/rooms/by_roomID${lastRoomClickedID}`);\r\n      // Fetch room type details by room type ID\r\n      const roomTypeResponse = await axios.get(`/rooms/room_type_ByID${roomResponse.data[0].type_of_room}`);\r\n\r\n      // Calculate total price based on room type price and number of days\r\n      setTotalPrice(roomTypeResponse.data[0].price * calculateNumberOfDays(checkInDate, checkOutDate));\r\n    } catch (error) {\r\n      showErrorDialog(\"An error occurred:\", error, false, navigate);\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetchAndSetData();\r\n  }, []);\r\n\r\n  const handleExpirationChange = async event => {\r\n    // Extract the input value (card expiration month / year)\r\n    let inputValue = event.target.value;\r\n\r\n    // Ensure input is at least 3 characters long\r\n    if (inputValue.length <= 3) {\r\n      return;\r\n    }\r\n\r\n    // Remove non-digit characters from the input\r\n    inputValue = inputValue.replace(/\\D/g, '');\r\n\r\n    // Validate and format the input\r\n    if (inputValue.length > 0) {\r\n      // Extract month and year from the input\r\n      let [month, year] = inputValue.match(/(\\d{1,2})(\\d{0,2})/).slice(1, 3);\r\n\r\n      // Convert month and year to integers\r\n      month = parseInt(month, 10);\r\n      year = parseInt(year, 10);\r\n\r\n      // Validate month and year\r\n      if (month > 12 || month < 1 || year < new Date().getFullYear() - 2000) {\r\n        showErrorDialog('Invalid expiration date', \"Make sure the month and the date are correct.\", false, navigate);\r\n        // Clear input field\r\n        event.target.value = ``;\r\n        return;\r\n      }\r\n\r\n      // Update input field with formatted month/year\r\n      event.target.value = `${month}/${year}`;\r\n    }\r\n  };\r\n\r\n  // Function to handle the addition of a new service to the services list\r\n  const handleAddService = (event) => {\r\n    // Check if the services list already includes the selected service option\r\n    if (servicesList.includes(selectedService)) {\r\n      // If the service option already exists, show an error dialog\r\n      showErrorDialog(\"Error: \", \"Service option already exists in the list.\", false, navigate);\r\n    } else {\r\n      // If the service option doesn't exist, add it to the services list\r\n      setServicesList(previousList => [...previousList, selectedService]);\r\n\r\n      // Fetch the price of the selected service from the backend\r\n      axios.get(`services/get_service${selectedService}`)\r\n        .then(response => {\r\n          // Extract the service price from the response data\r\n          const servicePrice = response.data[0].service_price;\r\n          // Update the total price by adding the service price\r\n          setTotalPrice(previousTotalPrice => previousTotalPrice + servicePrice);\r\n        })\r\n        .catch(error => {\r\n          // If there's an error fetching the service price, show an error dialog\r\n          showErrorDialog('Error fetching service price:', error, false, navigate);\r\n        });\r\n    }\r\n  }\r\n\r\n  const handleServiceChange = (e) => {\r\n    setServiceOption(e.target.value);\r\n  };\r\n\r\n  const handleOptionChange = (e) => {\r\n    setSelectedOption(e.target.value);\r\n    changePaymentMethod(e.target.value);\r\n  };\r\n\r\n  let cardType = \"\";\r\n  const handleCardNumber = (e) => {\r\n    let numericValue = e.target.value\r\n    if (/\\D/.test(e.target.value)) {\r\n      numericValue = e.target.value.replace(/\\D/g, '');\r\n      e.target.value = numericValue;\r\n    }\r\n\r\n    let newCardType = '';\r\n    if (/^4/.test(numericValue)) {\r\n      newCardType = 'Visa';\r\n    } else if (/^5[1-5]/.test(numericValue)) {\r\n      newCardType = 'Mastercard';\r\n    } else if (/^3[47]/.test(numericValue)) {\r\n      newCardType = 'American Express';\r\n    }\r\n    cardType = newCardType;\r\n  }\r\n\r\n  const bankNameRef = useRef(null);\r\n  const cashNameRef = useRef(null);\r\n\r\n  const handlePay = async e => {\r\n    e.preventDefault();\r\n    let paymentId = 0;\r\n    let paymentEndpoint = '';\r\n    let paymentData = {};\r\n\r\n    switch (selectedOption) {\r\n      case 'credit-card':\r\n        // For credit card payment\r\n        paymentEndpoint = '/payments/add_card_payment'; // Set endpoint for adding card payment\r\n        paymentData = { price: totalPrice, paymentMethodId: 1, cardType }; // Set payment data for credit card\r\n        break;\r\n      case 'bank-transaction':\r\n        // For bank transaction payment\r\n        paymentEndpoint = '/payments/add_bank_payment'; // Set endpoint for adding bank payment\r\n        paymentData = { price: totalPrice, paymentMethodId: 2, bankName: bankNameRef.current.value }; // Set payment data for bank transaction\r\n        break;\r\n      case 'cash':\r\n        // For cash payment\r\n        paymentEndpoint = '/payments/add_cash_payment'; // Set endpoint for adding cash payment\r\n        const change = cashNameRef.current.value - totalPrice; // Calculate change\r\n        paymentData = { price: totalPrice, paymentMethodId: 3, change }; // Set payment data for cash\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // If payment endpoint is determined\r\n    if (paymentEndpoint !== '') {\r\n      // Make a POST request to add payment with payment data\r\n      const paymentRes = await axios.post('/payments/add_payment', paymentData);\r\n      // Make a POST request to the determined payment endpoint with payment data\r\n      await axios.post(paymentEndpoint, paymentData);\r\n      // Update payment ID with the received payment ID\r\n      paymentId = paymentRes.data.payment_id;\r\n    }\r\n\r\n    const reservationRequestData = {\r\n      check_in_date: checkInDate,           // Date of check-in\r\n      check_out_date: checkOutDate,         // Date of check-out\r\n      room_id: lastRoomClickedID,           // ID of the room selected\r\n      payment_id: paymentId,                 // ID of the payment method\r\n      user_id: userId                       // ID of the user making the reservation\r\n    };\r\n\r\n    // Making a POST request to add reservation\r\n    const reservationResponse = await axios.post(\"/reservations/add_reservation\", reservationRequestData);\r\n\r\n      try {\r\n        let counter = 0;  // Counter to keep track of the number of services processed\r\n        // Iterating through each service asynchronously\r\n        console.log(\"from\", servicesList)\r\n        servicesList.map(async (service) => {\r\n          // Fetching service details\r\n          const serviceResponse = await axios.get(`/services/get_service${service}`);\r\n          console.log(\"NOOO\", reservationResponse)\r\n          const serviceId = serviceResponse.data[0].serviceid; // Extracting service ID from the response\r\n          // Making a POST request to add service to service log\r\n          await axios.post(`/services/add_to_service_log`, { service_id: serviceId, reservation_id: reservationResponse.data.insertId });\r\n          counter++;\r\n          // Checking if all services have been processed\r\n          if (counter === servicesList.length) {\r\n            return Promise.resolve(); // Resolving the promise once all services are processed\r\n          }\r\n        });\r\n      } catch (error) {\r\n        showErrorDialog(\"Error occurred:\", error, false, navigate);\r\n      }\r\n    showSuccessDialog(\"Payment Approved!\", \"You'll receive an email with your reservation details soon.\", navigate);\r\n  };\r\n\r\n  const renderForm = () => {\r\n    switch (selectedOption) {\r\n      case 'credit-card':\r\n        return <CreditCardForm />;\r\n      case 'bank-transaction':\r\n        return <BankTransactionForm />;\r\n      case 'cash':\r\n        return <CashForm />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    // Main container with body class\r\n    <div className='body'>\r\n      {/* Form for payment method selection */}\r\n      <form className='payment-method-selection'>\r\n        {/* Radio button for credit card payment */}\r\n        <label className='payment-method-selection-content'>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"credit-card\"\r\n            checked={selectedOption === 'credit-card'} // Checking if credit card is selected\r\n            onChange={handleOptionChange} // Handling change event for credit card selection\r\n            className='payment-method-selection-content'\r\n          />\r\n          Credit Card\r\n        </label>\r\n        {/* Radio button for bank transaction payment */}\r\n        <label className='payment-method-selection-content'>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"bank-transaction\"\r\n            checked={selectedOption === 'bank-transaction'} // Checking if bank transaction is selected\r\n            onChange={handleOptionChange} // Handling change event for bank transaction selection\r\n            className='payment-method-selection-content'\r\n          />\r\n          Bank Transaction\r\n        </label>\r\n        {/* Radio button for cash payment */}\r\n        <label className='payment-method-selection-content'>\r\n          <input\r\n            type=\"radio\"\r\n            value=\"cash\"\r\n            checked={selectedOption === 'cash'} // Checking if cash is selected\r\n            onChange={handleOptionChange} // Handling change event for cash selection\r\n            className='payment-method-selection-content'\r\n          />\r\n          Cash\r\n        </label>\r\n      </form>\r\n      {/* Display total price */}\r\n      <h1><center>{totalPrice}</center></h1>\r\n      {/* Render payment form based on selected option */}\r\n      {renderForm()}\r\n    </div>\r\n  );\r\n\r\n  // Component for Credit Card payment form\r\n  function CreditCardForm() {\r\n    return (\r\n      <div className=\"card-form\">\r\n        {/* Form for credit card details */}\r\n        <form action=\"#\">\r\n          {/* Input field for card number */}\r\n          <div className=\"card-form-group\">\r\n            <label htmlFor=\"cardnumber\">Card Number</label>\r\n            <input type=\"text\" onInput={handleCardNumber} maxLength=\"19\" id=\"cardnumber\" className=\"cardnumber\" required />\r\n          </div>\r\n          {/* Input field for cardholder name */}\r\n          <div className=\"card-form-group\">\r\n            <label htmlFor=\"cardholder\">Card Holder Name</label>\r\n            <input type=\"text\" id=\"cardholder\" className=\"cardholder\" required />\r\n          </div>\r\n          {/* Input field for expiration date */}\r\n          <div className=\"card-form-group\">\r\n            <label htmlFor=\"expiration\">Expiration Date</label>\r\n            <input type=\"text\" id=\"expiration\" className=\"expiration\" onChange={handleExpirationChange} placeholder=\"MM/YY\" required />\r\n          </div>\r\n          {/* Input field for PIN */}\r\n          <div className=\"card-form-group\">\r\n            <label htmlFor=\"pin\">PIN</label>\r\n            <input type=\"password\" id=\"pin\" className=\"pin\" maxLength=\"4\" required />\r\n          </div>\r\n          {/* Dropdown for selecting services */}\r\n          <select name=\"services_selector\" className=\"services_selector\" id=\"services_selector_1\"\r\n            onChange={handleServiceChange} value={selectedOption} required>\r\n            {/* Mapping services to options */}\r\n            {services.map(service => (\r\n              <option key={service.serviceid} value={service.service_name}>{service.service_name}</option>\r\n            ))}\r\n          </select>\r\n          {/* Button to add service */}\r\n          <button className=\"add-service-button\" onClick={handleAddService}><center>Add Amenity</center></button>\r\n          {/* Button to confirm payment */}\r\n          <button className=\"pay-button\" onClick={handlePay}><center>Confirm Payment</center></button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Component for Bank Transaction payment form\r\n  function BankTransactionForm() {\r\n    return (\r\n      <div className=\"bank-form\">\r\n        {/* Form for bank transaction details */}\r\n        <form action=\"#\">\r\n          {/* Input field for account holder name */}\r\n          <div className=\"bank-form-group\">\r\n            <label htmlFor=\"accountHolder\">Account Holder Name</label>\r\n            <input type=\"text\" id=\"accountHolder\" className=\"accountHolder\" required />\r\n          </div>\r\n          {/* Input field for account number */}\r\n          <div className=\"bank-form-group\">\r\n            <label htmlFor=\"accountNumber\">Account Number</label>\r\n            <input type=\"text\" id=\"accountNumber\" className=\"accountNumber\" required />\r\n          </div>\r\n          {/* Input field for bank name */}\r\n          <div className=\"bank-form-group\">\r\n            <label htmlFor=\"bank_name\">Bank Name</label>\r\n            <input type=\"text\" id=\"bank_name\" className=\"bank_name\" ref={bankNameRef} required />\r\n          </div>\r\n          {/* Textarea for transaction description */}\r\n          <div className=\"bank-form-group\">\r\n            <label htmlFor=\"description\">Transaction Description</label>\r\n            <textarea id=\"description\" className=\"description\" rows=\"4\" required></textarea>\r\n          </div>\r\n          {/* Dropdown for selecting services */}\r\n          <select name=\"services_selector\" className=\"services_selector\" id=\"services_selector_1\"\r\n            onChange={handleServiceChange} value={selectedOption} required>\r\n            {/* Mapping services to options */}\r\n            {services.map(service => (\r\n              <option key={service.serviceid} value={service.service_name}>{service.service_name}</option>\r\n            ))}\r\n          </select>\r\n          {/* Button to add service */}\r\n          <button className=\"add-service-button\" onClick={handleAddService}><center>Add Amenity</center></button>\r\n          {/* Button to confirm payment */}\r\n          <button className=\"pay-button\" onClick={handlePay}><center>Confirm Payment</center></button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Component for Cash payment form\r\n  function CashForm() {\r\n    return (\r\n      <div className=\"cash-form\">\r\n        {/* Form for cash payment details */}\r\n        <form action=\"#\">\r\n          {/* Dropdown for selecting badge type */}\r\n          <div className=\"cash-form-group\">\r\n            <label htmlFor=\"badge\">Badge Type</label>\r\n            <select name=\"badge\" className=\"badge\" id=\"badge\" required>\r\n              {/* Options for badge type */}\r\n              <option value=\"colones\">Colones</option>\r\n              <option value=\"dolares\">Dollars</option>\r\n              <option value=\"euros\">Euros</option>\r\n              <option value=\"otro\">Other</option>\r\n            </select>\r\n            {/* Input field for cash amount */}\r\n            <label htmlFor=\"cash-amount\">Amount</label>\r\n            <input type=\"number\" id=\"cash-amount\" className=\"cash-amount\" ref={cashNameRef} required />\r\n          </div>\r\n          {/* Dropdown for selecting services */}\r\n          <select name=\"services_selector\" className=\"services_selector\" id=\"services_selector_1\"\r\n            onChange={handleServiceChange} value={selectedOption} required>\r\n            {/* Mapping services to options */}\r\n            {services.map(service => (\r\n              <option key={service.serviceid} value={service.service_name}>{service.service_name}</option>\r\n            ))}\r\n          </select>\r\n          {/* Button to add service */}\r\n          <button className=\"add-service-button\" onClick={handleAddService}><center>Add Amenity</center></button>\r\n          {/* Button to confirm payment */}\r\n          <button className=\"pay-button\" onClick={handlePay}><center>Confirm Payment</center></button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Payment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}