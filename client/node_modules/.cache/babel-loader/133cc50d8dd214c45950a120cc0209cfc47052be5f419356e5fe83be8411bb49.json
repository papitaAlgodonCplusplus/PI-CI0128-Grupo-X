{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\PI-CI0128-Grupo-X\\\\client\\\\src\\\\pages\\\\ReservationsAdmin.jsx\",\n  _s = $RefreshSig$();\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useContext, useEffect, useCallback } from 'react';\nimport '../styles.scss';\nimport axios from \"axios\";\nimport { AuthContext } from '../AuthContext.js';\nimport X from \"../img/X.png\";\nimport Wrench from \"../img/Wrench.png\";\nimport 'react-calendar/dist/Calendar.css';\nimport Calendar from 'react-calendar';\nimport Search from \"../img/Search.png\";\nimport { showErrorDialog, calculateNumberOfDays, emptyContainer, updateContainer, putDataWithTimeout, deleteDataWithTimeout } from '../Misc.js';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReservationsAdmin = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    userRol\n  } = useContext(AuthContext);\n  const {\n    userId\n  } = useContext(AuthContext);\n  const [fetched, setFetched] = useState(false);\n  const [inputs, setInputs] = useState({\n    name: \"\",\n    desc: \"\",\n    search: \"\",\n    delete: \"\",\n    filename: \"\"\n  });\n\n  // Function to add a new reservation to the reservations container\n  const addReservation = (title, checkInDate, checkOutDate, imageFilename, price, reservationId) => {\n    // Selecting the reservations container element\n    const reservationsContainer = document.querySelector('.list-container');\n    // Generating HTML for the new reservation item\n    const newReservationHTML = `\n  <div class=\"list-item\" style=\"width: 600px; padding: 1%; margin-left: 2%;\">\n      <div style=\"display: flex; align-items: center;\">\n          <img src=\"${imageFilename}\" alt=\"${imageFilename}\" style=\"height: 900px; max-width: 1000px; margin-right: 2%;\" />\n          <div style=\"margin-left: 10px;\">\n              <h3>${title}</h3>\n              <div style=\"display: flex; justify-content: space-between;\">\n                  <div style=\"flex: 1;\">\n                      <p style=\"max-width: 100%; display: inline-block; margin-bottom: 0%\">Check In:</p>\n                      <p>${checkInDate}</p>\n                  </div>\n                  <div style=\"flex: 1; margin-left: 10px;\">\n                      <p style=\"max-width: 100%; display: inline-block; margin-bottom: 0%\">Check Out:</p>\n                      <p>${checkOutDate}</p>\n                  </div>\n              </div>\n              <h3 style=\"position: absolute; width: 50%;\">Price: </h3>\n              <p style=\"margin: 1.3%; margin-left: 25%;\">${price}</p>\n          </div>\n      </div>\n      <button class=\"delete-button\" id=\"delete-reservation-button-${reservationId}\" style=\"background-color: transparent; border: none; margin-top: -2%; position: absolute; margin-left: 41%\">\n          <img src=${X} alt=\"X\" id=\"XImg\" style=\"width: 40px; height: 40px; background-color: transparent; margin: 0%;\" />\n      </button>\n      <button class=\"modify-button\" id=\"modify-reservation-button-${reservationId}\" style=\"background-color: transparent; border: none; margin-top: 6%; position: absolute; margin-left: 40.5%\">\n          <img src=${Wrench} alt=\"Wrench\" id=\"WrenchImg\" style=\"width: 40px; height: 40px; background-color: transparent; margin-top: 0%;\" />\n      </button>\n  </div>  \n`;\n    // Adding the new reservation HTML to the reservations container\n    reservationsContainer.insertAdjacentHTML('beforeend', newReservationHTML);\n    // Adding event listeners for delete and modify buttons\n    const deleteButton = document.getElementById(\"delete-reservation-button-\" + reservationId);\n    deleteButton.addEventListener('click', e => handleDelete(e, reservationId));\n    const modifyButton = document.getElementById(\"modify-reservation-button-\" + reservationId);\n    modifyButton.addEventListener('click', e => handleModify(e, reservationId));\n  };\n\n  // Function to fetch user reservations data\n  const fetchUserReservations = useCallback(async () => {\n    if (userRol !== \"admin\" && userRol !== \"employee\") {\n      return;\n    }\n    // Selecting the container element to display reservations\n    const reservationsContainer = document.querySelector('.list-container');\n    try {\n      // Clearing the reservations container\n      emptyContainer(reservationsContainer);\n      // Fetching reservations data for the current user\n      const userReservationsResponse = await axios.get(`/reservations/by_userID${userId}`);\n      // Iterating over each reservation\n      for (const reservation of userReservationsResponse.data) {\n        // Converting check-in and check-out dates to a readable format\n        const checkInDate = new Date(reservation.check_in).toISOString().slice(0, 19).replace('T', ' ');\n        const checkOutDate = new Date(reservation.check_out).toISOString().slice(0, 19).replace('T', ' ');\n        // Fetching room details for the reservation\n        const roomResponse = await axios.get(`/rooms/by_roomID${reservation.id_room}`);\n        // Fetching image details for the room\n        const imageResponse = await axios.get(`/files/get_image_by_id${roomResponse.data[0].image_id}`);\n        const imagePath = \"/upload/\" + imageResponse.data[0].filename;\n        // Fetching payment details for the reservation\n        const paymentResponse = await axios.get(`/payments/payment_byPaymentID${reservation.payment_id}`);\n        // Adding reservation to the UI\n        addReservation(roomResponse.data[0].title, checkInDate, checkOutDate, imagePath, paymentResponse.data[0].price, reservation.reservationid);\n        // Updating the reservations container\n        updateContainer(reservationsContainer);\n      }\n      return;\n    } catch (error) {\n      showErrorDialog(\"An error occurred:\", error);\n    }\n  });\n  useEffect(() => {\n    if (!fetched) {\n      fetchUserReservations();\n      setFetched(true);\n    }\n  }, [fetchUserReservations, fetched]);\n\n  // State variable for room ID\n  const [selectedRoomID, setSelectedRoomID] = useState(null);\n\n  // Function to handle confirmation of reservation modification\n  const handleModifyConfirm = async e => {\n    e.preventDefault(); // Preventing default form submission behavior\n    try {\n      // Fetching room details based on the selected room ID\n      const roomResponse = await axios.get(`/rooms/by_roomID${selectedRoomID}`);\n      // Fetching room type details for the selected room\n      const roomTypeResponse = await axios.get(`/rooms/room_type_ByID${roomResponse.data[0].type_of_room}`);\n      // Calculating new price based on the room type and selected dates\n      let newPrice = roomTypeResponse.data[0].price * calculateNumberOfDays(selectedDateRange[0], selectedDateRange[1]);\n      // Fetching payment details for the reservation\n      const paymentResponse = await axios.get(`/payments/payment_byPaymentID${reservation[0].payment_id}`);\n      // Fetching total service price for the reservation\n      const servicePriceResponse = await axios.get(`services/get_sum${reservation[0].reservationid}`);\n      // Adding total service price to the new price\n      newPrice += servicePriceResponse.data.totalServicePrice;\n      // Rounding the new price\n      newPrice = Math.floor(newPrice);\n      // Getting the original price from payment details\n      const originalPrice = Math.floor(paymentResponse.data[0].price);\n      // Comparing the new price with the original price\n      console.log(newPrice, originalPrice);\n      if (Math.abs(originalPrice - newPrice) > 1) {\n        showErrorDialog(\"Error: \", \"Cannot select a range of dates greater or lesser than the original.\");\n        return;\n      }\n      // Creating request object for updating the reservation\n      const request = {\n        check_in: selectedDateRange[0].toISOString().slice(0, 19).replace('T', ' '),\n        check_out: selectedDateRange[1].toISOString().slice(0, 19).replace('T', ' '),\n        reservationID: reservation[0].reservationid\n      };\n      // Making a PUT request to update the reservation\n      putDataWithTimeout(\"/reservations/updateReservation\", request);\n      // Closing the modal\n      closeModal();\n      // Resetting date state\n      setSelectedDateRange(null);\n      // Fetching user reservations to update UI\n      fetchUserReservations();\n      return;\n    } catch (error) {\n      showErrorDialog(\"An error occurred:\", error);\n    }\n  };\n\n  // State variable for selected date range\n  const [selectedDateRange, setSelectedDateRange] = useState(null);\n\n  // Function to handle modification of reservation\n  const handleModify = async (e, reservationId) => {\n    e.preventDefault(); // Preventing default form submission behavior\n    try {\n      // Fetching reservation details by ID\n      const reservationResponse = await axios.get(`/reservations/get_reservation_by_id${reservationId}`);\n      // Extracting room ID from reservation response\n      const roomID = reservationResponse.data[0].id_room;\n      // Setting the selected room ID state\n      setSelectedRoomID(roomID);\n      // Fetching reservations for the selected room ID\n      axios.get(`/reservations/get_reservations_by_room_id${roomID}`);\n      // Setting reservations state with reservation data\n      setReservations(reservationResponse.data);\n      // Displaying modal for reservation modification\n      displayModal(reservationId);\n      return;\n    } catch (error) {\n      // Displaying error dialog if an error occurs\n      showErrorDialog(\"An error occurred:\", error);\n    }\n  };\n  const handleDelete = async (e, id) => {\n    e.preventDefault();\n    try {\n      await deleteDataWithTimeout(`/reservations/delete${id}`, 500);\n      fetchUserReservations();\n      return;\n    } catch (error) {\n      showErrorDialog(\"An error occurred:\", error);\n    }\n  };\n  const displayModal = async id => {\n    const response = await axios.get(`/reservations/get_reservation_by_id${id}`);\n    setReservation(response.data);\n    var modal = document.getElementById(\"calendar-modal\");\n    modal.style.display = \"block\";\n  };\n  function closeModal() {\n    var modal = document.getElementById(\"calendar-modal\");\n    modal.style.display = \"none\";\n  }\n  const handleChange = e => {\n    setInputs(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n  const [reservations, setReservations] = useState([]);\n  function dateRangeCheck(showDialog) {\n    if (!selectedDateRange) {\n      return false;\n    }\n    if (!selectedDateRange[1]) {\n      return false;\n    }\n    for (const reservation of reservations) {\n      const checkInDate = new Date(reservation.check_in);\n      const checkOutDate = new Date(reservation.check_out);\n      if (selectedDateRange[1] >= checkInDate && selectedDateRange[0] <= checkOutDate) {\n        setSelectedDateRange(null);\n        if (showDialog) {\n          showErrorDialog(\"Error: \", \"The chosen date range is already occupied, please select a new one.\");\n        }\n        return false;\n      }\n    }\n    return true;\n  }\n  const [reservation, setReservation] = useState(new Date());\n\n  // Function to determine if a date should be disabled on the calendar tile\n  const tileDisabled = ({\n    date\n  }) => {\n    // Checking if there is a reservation\n    if (reservation[0]) {\n      // Extracting check-in and check-out dates from the reservation\n      const checkInDate = new Date(reservation[0].check_in).toISOString().slice(0, 19).replace('T', ' ');\n      const checkOutDate = new Date(reservation[0].check_out).toISOString().slice(0, 19).replace('T', ' ');\n      // Checking if the date falls within the reservation period\n      if (date >= new Date(checkInDate) && date <= new Date(checkOutDate)) {\n        return true; // Disabling the tile if the date is within the reservation period\n      }\n    }\n    // Checking if a room is selected and there are reservations\n    if (selectedRoomID && reservations.length > 0) {\n      // Iterating over each reservation to check if the date falls within any reservation period\n      for (const reservationItem of reservations) {\n        const checkInDate = new Date(reservationItem.check_in);\n        const checkOutDate = new Date(reservationItem.check_out);\n        // Checking if the date falls within the reservation period\n        if (date >= checkInDate && date <= checkOutDate) {\n          return true; // Disabling the tile if the date is within any reservation period\n        }\n      }\n    }\n    const today = new Date();\n    // Disabling the tile if the date is before today\n    return date < today;\n  };\n  // Function to handle search for reservations by user email\n  const handleSearch = async e => {\n    // Selecting the reservations container element\n    const reservationsContainer = document.querySelector('.list-container');\n    e.preventDefault();\n    // Getting the email input value\n    const email = inputs.search;\n    // If the email input is empty, return\n    if (email === '') {\n      return;\n    } else {\n      try {\n        // Clearing the reservations container\n        emptyContainer(reservationsContainer);\n        // Fetching user ID based on the provided email\n        const userResponse = await axios.get(`/auth/getUserID${email}`);\n        // If no user is found, show error dialog and return\n        if (!userResponse.data[0]) {\n          showErrorDialog(\"An error occurred:\", \"Invalid email\");\n          return;\n        }\n        // Fetching reservations for the user ID\n        const reservationsResponse = await axios.get(`/reservations/by_userID${userResponse.data[0].userid}`);\n        // Iterating over each reservation\n        for (const reservation of reservationsResponse.data) {\n          // Converting check-in and check-out dates to a readable format\n          const checkInDate = new Date(reservation.check_in).toISOString().slice(0, 19).replace('T', ' ');\n          const checkOutDate = new Date(reservation.check_out).toISOString().slice(0, 19).replace('T', ' ');\n          // Fetching room details for the reservation\n          const roomResponse = await axios.get(`/rooms/by_roomID${reservation.id_room}`);\n          // Fetching image details for the room\n          const imageResponse = await axios.get(`/files/get_image_by_id${roomResponse.data[0].image_id}`);\n          const imagePath = \"/upload/\" + imageResponse.data[0].filename;\n          // Fetching payment details for the reservation\n          const paymentResponse = await axios.get(`/payments/payment_byPaymentID${reservation.payment_id}`);\n          // Adding reservation to the UI\n          addReservation(roomResponse.data[0].title, checkInDate, checkOutDate, imagePath, paymentResponse.data[0].price, reservation.reservationid);\n          // Updating the reservations container\n          updateContainer(reservationsContainer);\n        }\n        return;\n      } catch (error) {\n        showErrorDialog(\"An error occurred:\", error);\n      }\n    }\n  };\n  return userRol === \"admin\" || userRol === \"employee\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin-container\",\n        children: [\n        /*#__PURE__*/\n        // Calendar modal\n        _jsxDEV(\"div\", {\n          id: \"calendar-modal\",\n          className: \"form-modal\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"calendar-modal-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"close\",\n              onClick: closeModal,\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this), selectedDateRange && selectedDateRange.length > 0 && dateRangeCheck(true) ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-modal-calendar\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-date\",\n                children: [\"Fecha llegada: \", selectedDateRange[0].getDate(), \"/\", selectedDateRange[0].getMonth() + 1, \"/\", selectedDateRange[0].getFullYear()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"text-date\",\n                children: [\"Fecha salida:  \", selectedDateRange[1].getDate(), \"/\", selectedDateRange[1].getMonth() + 1, \"/\", selectedDateRange[1].getFullYear()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 19\n            }, this) :\n            /*#__PURE__*/\n            // Displaying default date range if no selection\n            _jsxDEV(\"div\", {\n              className: \"text-modal-calendar\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-date\",\n                children: \"Fecha llegada: --/--/----\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 332,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-date\",\n                children: \"Fecha salida: --/--/----\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n              className: \"modal-calendar\",\n              id: \"modal-calendar-1\",\n              value: selectedDateRange,\n              selectRange: true,\n              tileDisabled: tileDisabled,\n              onChange: setSelectedDateRange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `${!(selectedDateRange && selectedDateRange.length > 0 && dateRangeCheck(false)) ? 'modal-disabled-button' : 'modal-calendar-button'}`,\n              onClick: handleModifyConfirm,\n              disabled: !(selectedDateRange && selectedDateRange.length > 0 && dateRangeCheck(false)),\n              children: /*#__PURE__*/_jsxDEV(\"center\", {\n                children: \"Confirm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"search-container-admin\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"search\",\n              id: \"search\",\n              onChange: handleChange,\n              placeholder: \"Enter your search query\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"searchImg\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: Search,\n                alt: \"Search\",\n                id: \"searchImg\",\n                onClick: handleSearch\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"amenities-title\",\n            children: /*#__PURE__*/_jsxDEV(\"center\", {\n              children: \"Reservations\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-container\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showErrorDialog(\"Error: \", \"You must login as admin or employee to access this page\", true, navigate)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n};\n_s(ReservationsAdmin, \"8XnY+SuOFugTMcixUmYUyft9P+M=\", false, function () {\n  return [useNavigate];\n});\n_c = ReservationsAdmin;\nexport default ReservationsAdmin;\nvar _c;\n$RefreshReg$(_c, \"ReservationsAdmin\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useCallback","axios","AuthContext","X","Wrench","Calendar","Search","showErrorDialog","calculateNumberOfDays","emptyContainer","updateContainer","putDataWithTimeout","deleteDataWithTimeout","useNavigate","jsxDEV","_jsxDEV","ReservationsAdmin","_s","navigate","userRol","userId","fetched","setFetched","inputs","setInputs","name","desc","search","delete","filename","addReservation","title","checkInDate","checkOutDate","imageFilename","price","reservationId","reservationsContainer","document","querySelector","newReservationHTML","insertAdjacentHTML","deleteButton","getElementById","addEventListener","e","handleDelete","modifyButton","handleModify","fetchUserReservations","userReservationsResponse","get","reservation","data","Date","check_in","toISOString","slice","replace","check_out","roomResponse","id_room","imageResponse","image_id","imagePath","paymentResponse","payment_id","reservationid","error","selectedRoomID","setSelectedRoomID","handleModifyConfirm","preventDefault","roomTypeResponse","type_of_room","newPrice","selectedDateRange","servicePriceResponse","totalServicePrice","Math","floor","originalPrice","console","log","abs","request","reservationID","closeModal","setSelectedDateRange","reservationResponse","roomID","setReservations","displayModal","id","response","setReservation","modal","style","display","handleChange","prev","target","value","reservations","dateRangeCheck","showDialog","tileDisabled","date","length","reservationItem","today","handleSearch","email","userResponse","reservationsResponse","userid","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","getDate","getMonth","getFullYear","selectRange","onChange","disabled","type","placeholder","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/Alex/Desktop/PI-CI0128-Grupo-X/client/src/pages/ReservationsAdmin.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useContext, useEffect, useCallback } from 'react'\r\nimport '../styles.scss';\r\nimport axios from \"axios\"\r\nimport { AuthContext } from '../AuthContext.js';\r\nimport X from \"../img/X.png\"\r\nimport Wrench from \"../img/Wrench.png\"\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport Calendar from 'react-calendar';\r\nimport Search from \"../img/Search.png\";\r\nimport { showErrorDialog, calculateNumberOfDays, emptyContainer, updateContainer, putDataWithTimeout, deleteDataWithTimeout } from '../Misc.js';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ReservationsAdmin = () => {\r\n  const navigate = useNavigate()\r\n  const { userRol } = useContext(AuthContext);\r\n  const { userId } = useContext(AuthContext);\r\n  const [fetched, setFetched] = useState(false)\r\n  const [inputs, setInputs] = useState({\r\n    name: \"\",\r\n    desc: \"\",\r\n    search: \"\",\r\n    delete: \"\",\r\n    filename: \"\",\r\n  })\r\n\r\n  // Function to add a new reservation to the reservations container\r\n  const addReservation = (title, checkInDate, checkOutDate, imageFilename, price, reservationId) => {\r\n    // Selecting the reservations container element\r\n    const reservationsContainer = document.querySelector('.list-container');\r\n    // Generating HTML for the new reservation item\r\n    const newReservationHTML = `\r\n  <div class=\"list-item\" style=\"width: 600px; padding: 1%; margin-left: 2%;\">\r\n      <div style=\"display: flex; align-items: center;\">\r\n          <img src=\"${imageFilename}\" alt=\"${imageFilename}\" style=\"height: 900px; max-width: 1000px; margin-right: 2%;\" />\r\n          <div style=\"margin-left: 10px;\">\r\n              <h3>${title}</h3>\r\n              <div style=\"display: flex; justify-content: space-between;\">\r\n                  <div style=\"flex: 1;\">\r\n                      <p style=\"max-width: 100%; display: inline-block; margin-bottom: 0%\">Check In:</p>\r\n                      <p>${checkInDate}</p>\r\n                  </div>\r\n                  <div style=\"flex: 1; margin-left: 10px;\">\r\n                      <p style=\"max-width: 100%; display: inline-block; margin-bottom: 0%\">Check Out:</p>\r\n                      <p>${checkOutDate}</p>\r\n                  </div>\r\n              </div>\r\n              <h3 style=\"position: absolute; width: 50%;\">Price: </h3>\r\n              <p style=\"margin: 1.3%; margin-left: 25%;\">${price}</p>\r\n          </div>\r\n      </div>\r\n      <button class=\"delete-button\" id=\"delete-reservation-button-${reservationId}\" style=\"background-color: transparent; border: none; margin-top: -2%; position: absolute; margin-left: 41%\">\r\n          <img src=${X} alt=\"X\" id=\"XImg\" style=\"width: 40px; height: 40px; background-color: transparent; margin: 0%;\" />\r\n      </button>\r\n      <button class=\"modify-button\" id=\"modify-reservation-button-${reservationId}\" style=\"background-color: transparent; border: none; margin-top: 6%; position: absolute; margin-left: 40.5%\">\r\n          <img src=${Wrench} alt=\"Wrench\" id=\"WrenchImg\" style=\"width: 40px; height: 40px; background-color: transparent; margin-top: 0%;\" />\r\n      </button>\r\n  </div>  \r\n`;\r\n    // Adding the new reservation HTML to the reservations container\r\n    reservationsContainer.insertAdjacentHTML('beforeend', newReservationHTML);\r\n    // Adding event listeners for delete and modify buttons\r\n    const deleteButton = document.getElementById(\"delete-reservation-button-\" + reservationId);\r\n    deleteButton.addEventListener('click', (e) => handleDelete(e, reservationId));\r\n    const modifyButton = document.getElementById(\"modify-reservation-button-\" + reservationId);\r\n    modifyButton.addEventListener('click', (e) => handleModify(e, reservationId));\r\n  };\r\n\r\n  // Function to fetch user reservations data\r\n  const fetchUserReservations = useCallback(async () => {\r\n    if (userRol !== \"admin\" && userRol !== \"employee\") {\r\n      return;\r\n    }\r\n    // Selecting the container element to display reservations\r\n    const reservationsContainer = document.querySelector('.list-container');\r\n    try {\r\n      // Clearing the reservations container\r\n      emptyContainer(reservationsContainer);\r\n      // Fetching reservations data for the current user\r\n      const userReservationsResponse = await axios.get(`/reservations/by_userID${userId}`);\r\n      // Iterating over each reservation\r\n      for (const reservation of userReservationsResponse.data) {\r\n        // Converting check-in and check-out dates to a readable format\r\n        const checkInDate = new Date(reservation.check_in).toISOString().slice(0, 19).replace('T', ' ');\r\n        const checkOutDate = new Date(reservation.check_out).toISOString().slice(0, 19).replace('T', ' ');\r\n        // Fetching room details for the reservation\r\n        const roomResponse = await axios.get(`/rooms/by_roomID${reservation.id_room}`);\r\n        // Fetching image details for the room\r\n        const imageResponse = await axios.get(`/files/get_image_by_id${roomResponse.data[0].image_id}`);\r\n        const imagePath = \"/upload/\" + imageResponse.data[0].filename;\r\n        // Fetching payment details for the reservation\r\n        const paymentResponse = await axios.get(`/payments/payment_byPaymentID${reservation.payment_id}`);\r\n        // Adding reservation to the UI\r\n        addReservation(roomResponse.data[0].title, checkInDate, checkOutDate, imagePath,\r\n          paymentResponse.data[0].price, reservation.reservationid);\r\n        // Updating the reservations container\r\n        updateContainer(reservationsContainer);\r\n      }\r\n      return;\r\n    } catch (error) {\r\n      showErrorDialog(\"An error occurred:\", error);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!fetched) {\r\n      fetchUserReservations();\r\n      setFetched(true);\r\n    }\r\n  }, [fetchUserReservations, fetched]);\r\n\r\n  // State variable for room ID\r\n  const [selectedRoomID, setSelectedRoomID] = useState(null);\r\n\r\n  // Function to handle confirmation of reservation modification\r\n  const handleModifyConfirm = async (e) => {\r\n    e.preventDefault(); // Preventing default form submission behavior\r\n    try {\r\n      // Fetching room details based on the selected room ID\r\n      const roomResponse = await axios.get(`/rooms/by_roomID${selectedRoomID}`);\r\n      // Fetching room type details for the selected room\r\n      const roomTypeResponse = await axios.get(`/rooms/room_type_ByID${roomResponse.data[0].type_of_room}`);\r\n      // Calculating new price based on the room type and selected dates\r\n      let newPrice = roomTypeResponse.data[0].price * calculateNumberOfDays(selectedDateRange[0],\r\n        selectedDateRange[1]);\r\n      // Fetching payment details for the reservation\r\n      const paymentResponse = await axios.get(`/payments/payment_byPaymentID${reservation[0].payment_id}`);\r\n      // Fetching total service price for the reservation\r\n      const servicePriceResponse = await axios.get(`services/get_sum${reservation[0].reservationid}`);\r\n      // Adding total service price to the new price\r\n      newPrice += servicePriceResponse.data.totalServicePrice;\r\n      // Rounding the new price\r\n      newPrice = Math.floor(newPrice);\r\n      // Getting the original price from payment details\r\n      const originalPrice = Math.floor(paymentResponse.data[0].price);\r\n      // Comparing the new price with the original price\r\n      console.log(newPrice, originalPrice)\r\n      if (Math.abs(originalPrice - newPrice) > 1 ) {\r\n        showErrorDialog(\"Error: \", \"Cannot select a range of dates greater or lesser than the original.\");\r\n        return;\r\n      }\r\n      // Creating request object for updating the reservation\r\n      const request = {\r\n        check_in: selectedDateRange[0].toISOString().slice(0, 19).replace('T', ' '),\r\n        check_out: selectedDateRange[1].toISOString().slice(0, 19).replace('T', ' '),\r\n        reservationID: reservation[0].reservationid,\r\n      };\r\n      // Making a PUT request to update the reservation\r\n      putDataWithTimeout(\"/reservations/updateReservation\", request);\r\n      // Closing the modal\r\n      closeModal();\r\n      // Resetting date state\r\n      setSelectedDateRange(null);\r\n      // Fetching user reservations to update UI\r\n      fetchUserReservations();\r\n      return;\r\n    } catch (error) {\r\n      showErrorDialog(\"An error occurred:\", error);\r\n    }\r\n  };\r\n\r\n  // State variable for selected date range\r\n  const [selectedDateRange, setSelectedDateRange] = useState(null);\r\n\r\n  // Function to handle modification of reservation\r\n  const handleModify = async (e, reservationId) => {\r\n    e.preventDefault(); // Preventing default form submission behavior\r\n    try {\r\n      // Fetching reservation details by ID\r\n      const reservationResponse = await axios.get(`/reservations/get_reservation_by_id${reservationId}`);\r\n      // Extracting room ID from reservation response\r\n      const roomID = reservationResponse.data[0].id_room;\r\n      // Setting the selected room ID state\r\n      setSelectedRoomID(roomID);\r\n      // Fetching reservations for the selected room ID\r\n      axios.get(`/reservations/get_reservations_by_room_id${roomID}`);\r\n      // Setting reservations state with reservation data\r\n      setReservations(reservationResponse.data);\r\n      // Displaying modal for reservation modification\r\n      displayModal(reservationId);\r\n      return;\r\n    } catch (error) {\r\n      // Displaying error dialog if an error occurs\r\n      showErrorDialog(\"An error occurred:\", error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (e, id) => {\r\n    e.preventDefault()\r\n    try {\r\n      await deleteDataWithTimeout(`/reservations/delete${id}`, 500);\r\n      fetchUserReservations();\r\n      return;\r\n    } catch (error) {\r\n      showErrorDialog(\"An error occurred:\", error);\r\n    }\r\n  }\r\n\r\n  const displayModal = async (id) => {\r\n    const response = await axios.get(`/reservations/get_reservation_by_id${id}`);\r\n    setReservation(response.data)\r\n    var modal = document.getElementById(\"calendar-modal\");\r\n    modal.style.display = \"block\";\r\n  }\r\n\r\n  function closeModal() {\r\n    var modal = document.getElementById(\"calendar-modal\");\r\n    modal.style.display = \"none\";\r\n  }\r\n\r\n  const handleChange = e => {\r\n    setInputs(prev => ({ ...prev, [e.target.name]: e.target.value }))\r\n  }\r\n\r\n  const [reservations, setReservations] = useState([]);\r\n  function dateRangeCheck(showDialog) {\r\n    if (!selectedDateRange) {\r\n      return false;\r\n    }\r\n    if (!selectedDateRange[1]) {\r\n      return false;\r\n    }\r\n    for (const reservation of reservations) {\r\n      const checkInDate = new Date(reservation.check_in);\r\n      const checkOutDate = new Date(reservation.check_out);\r\n      if (selectedDateRange[1] >= checkInDate && selectedDateRange[0] <= checkOutDate) {\r\n        setSelectedDateRange(null);\r\n        if (showDialog) {\r\n          showErrorDialog(\"Error: \", \"The chosen date range is already occupied, please select a new one.\")\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  const [reservation, setReservation] = useState(new Date());\r\n\r\n  // Function to determine if a date should be disabled on the calendar tile\r\n  const tileDisabled = ({ date }) => {\r\n    // Checking if there is a reservation\r\n    if (reservation[0]) {\r\n      // Extracting check-in and check-out dates from the reservation\r\n      const checkInDate = new Date(reservation[0].check_in).toISOString().slice(0, 19).replace('T', ' ');\r\n      const checkOutDate = new Date(reservation[0].check_out).toISOString().slice(0, 19).replace('T', ' ');\r\n      // Checking if the date falls within the reservation period\r\n      if (date >= new Date(checkInDate) && date <= new Date(checkOutDate)) {\r\n        return true; // Disabling the tile if the date is within the reservation period\r\n      }\r\n    }\r\n    // Checking if a room is selected and there are reservations\r\n    if (selectedRoomID && reservations.length > 0) {\r\n      // Iterating over each reservation to check if the date falls within any reservation period\r\n      for (const reservationItem of reservations) {\r\n        const checkInDate = new Date(reservationItem.check_in);\r\n        const checkOutDate = new Date(reservationItem.check_out);\r\n        // Checking if the date falls within the reservation period\r\n        if (date >= checkInDate && date <= checkOutDate) {\r\n          return true; // Disabling the tile if the date is within any reservation period\r\n        }\r\n      }\r\n    }\r\n    const today = new Date();\r\n    // Disabling the tile if the date is before today\r\n    return date < today;\r\n  };\r\n  // Function to handle search for reservations by user email\r\n  const handleSearch = async (e) => {\r\n    // Selecting the reservations container element\r\n    const reservationsContainer = document.querySelector('.list-container');\r\n    e.preventDefault();\r\n    // Getting the email input value\r\n    const email = inputs.search;\r\n    // If the email input is empty, return\r\n    if (email === '') {\r\n      return;\r\n    } else {\r\n      try {\r\n        // Clearing the reservations container\r\n        emptyContainer(reservationsContainer);\r\n        // Fetching user ID based on the provided email\r\n        const userResponse = await axios.get(`/auth/getUserID${email}`);\r\n        // If no user is found, show error dialog and return\r\n        if (!userResponse.data[0]) {\r\n          showErrorDialog(\"An error occurred:\", \"Invalid email\");\r\n          return;\r\n        }\r\n        // Fetching reservations for the user ID\r\n        const reservationsResponse = await axios.get(`/reservations/by_userID${userResponse.data[0].userid}`);\r\n        // Iterating over each reservation\r\n        for (const reservation of reservationsResponse.data) {\r\n          // Converting check-in and check-out dates to a readable format\r\n          const checkInDate = new Date(reservation.check_in).toISOString().slice(0, 19).replace('T', ' ');\r\n          const checkOutDate = new Date(reservation.check_out).toISOString().slice(0, 19).replace('T', ' ');\r\n          // Fetching room details for the reservation\r\n          const roomResponse = await axios.get(`/rooms/by_roomID${reservation.id_room}`);\r\n          // Fetching image details for the room\r\n          const imageResponse = await axios.get(`/files/get_image_by_id${roomResponse.data[0].image_id}`);\r\n          const imagePath = \"/upload/\" + imageResponse.data[0].filename;\r\n          // Fetching payment details for the reservation\r\n          const paymentResponse = await axios.get(`/payments/payment_byPaymentID${reservation.payment_id}`);\r\n          // Adding reservation to the UI\r\n          addReservation(roomResponse.data[0].title, checkInDate, checkOutDate, imagePath, paymentResponse.data[0].price, reservation.reservationid);\r\n          // Updating the reservations container\r\n          updateContainer(reservationsContainer);\r\n        }\r\n        return;\r\n      } catch (error) {\r\n        showErrorDialog(\"An error occurred:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return ( userRol === \"admin\" || userRol === \"employee\" ?\r\n    <div className='body'>\r\n      <div>\r\n        <div className='admin-container'>\r\n          {(\r\n            // Calendar modal\r\n            <div id=\"calendar-modal\" className='form-modal'>\r\n              <div className=\"calendar-modal-content\">\r\n                <span className=\"close\" onClick={closeModal}>&times;</span>\r\n                {/* Displaying selected date range if available */}\r\n                {selectedDateRange && selectedDateRange.length > 0 && dateRangeCheck(true) ? (\r\n                  <div className='text-modal-calendar'>\r\n                    <label className='text-date'>Fecha llegada: {selectedDateRange[0].getDate()}/{selectedDateRange[0].getMonth() + 1}/{selectedDateRange[0].getFullYear()}</label>\r\n                    <label className='text-date'>Fecha salida:  {selectedDateRange[1].getDate()}/{selectedDateRange[1].getMonth() + 1}/{selectedDateRange[1].getFullYear()}</label>\r\n                  </div>\r\n                ) : (\r\n                  // Displaying default date range if no selection\r\n                  <div className='text-modal-calendar'>\r\n                    <span className='text-date'>Fecha llegada: --/--/----</span>\r\n                    <span className='text-date'>Fecha salida: --/--/----</span>\r\n                  </div>\r\n                )}\r\n                {/* Calendar component */}\r\n                <Calendar className=\"modal-calendar\" id=\"modal-calendar-1\"\r\n                  value={selectedDateRange}\r\n                  selectRange={true}\r\n                  tileDisabled={tileDisabled}\r\n                  onChange={setSelectedDateRange}\r\n                />\r\n                {/* Button to confirm modification */}\r\n                <button className={`${!(selectedDateRange && selectedDateRange.length > 0 &&\r\n                  dateRangeCheck(false)) ? 'modal-disabled-button' : 'modal-calendar-button'}`}\r\n                  onClick={handleModifyConfirm} disabled={!(selectedDateRange && selectedDateRange.length > 0\r\n                    && dateRangeCheck(false))}>\r\n                  <center>Confirm</center>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {/* Search container */}\r\n          <div>\r\n            <div className=\"search-container-admin\">\r\n              <input type=\"text\" name=\"search\" id=\"search\" onChange={handleChange}\r\n                placeholder=\"Enter your search query\" />\r\n              {/* Button to trigger search */}\r\n              <button className=\"searchImg\">\r\n                <img src={Search} alt=\"Search\" id=\"searchImg\" onClick={handleSearch} />\r\n              </button>\r\n            </div>\r\n            {/* Reservations title */}\r\n            <h1 className='amenities-title'><center>Reservations</center></h1>\r\n            {/* Container for displaying reservations */}\r\n            <div className=\"list-container\">\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  : <div>{showErrorDialog(\"Error: \", \"You must login as admin or employee to access this page\", true, navigate)}</div>);\r\n};\r\n\r\nexport default ReservationsAdmin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}